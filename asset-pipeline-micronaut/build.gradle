plugins {
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
	// id "io.micronaut.library" version "1.0.0.RC13"
}

apply plugin: 'groovy'
apply plugin: 'java-library'

group = 'cloud.wondrify'

repositories {
	mavenCentral()
}

ext {
	micronautVersion = '4.0.3'
}

configurations {
	provided
	doc.extendsFrom(runtime)
}

sourceSets {
	main {
		compileClasspath += configurations.provided
		groovy.srcDirs   += ['src/main/java']
		java.srcDirs      = []
	}
}

// configurations.all {
	
// 	resolutionStrategy.dependencySubstitution {
//         substitute module("org.apache.groovy:groovy") using module('org.apache.groovy:4.0.20')

//     }
// }

ext {
	pomDescription = 'JVM Asset Pipeline Micronaut Adapter.'
}

dependencies {
	api     project(':asset-pipeline-core')
	compileOnly "io.micronaut:micronaut-inject-groovy:$micronautVersion"
	annotationProcessor "io.micronaut:micronaut-inject-java:$micronautVersion"
	compileOnly "io.micronaut:micronaut-inject:$micronautVersion"
	api("io.micronaut.rxjava3:micronaut-rxjava3:3.0.1")

    api "io.micronaut:micronaut-http-server-netty:$micronautVersion"
    api 'javax.annotation:javax.annotation-api:1.3.2'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude module:'groovy-all'
    }
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}

task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

apply {
	from rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
	from rootProject.layout.projectDirectory.file('gradle/publish-config.gradle')
}
