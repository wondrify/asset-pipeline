apply plugin: 'groovy'

group = 'cloud.wondrify'

repositories {
    mavenCentral()
}

ext {
    pomDescription = 'JVM Asset Pipeline library for serving static web assets, bundling, minifying, and extensibility for transpiling.'
}

configurations {
    provided
    doc.extendsFrom(runtime)
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        groovy.srcDirs += ['src/main/java']
        java.srcDirs = []
    }
}

dependencies {

    doc "org.apache.groovy:groovy:$groovy4Version"
    doc "org.apache.groovy:groovy-ant:$groovy4Version"
    doc "org.apache.groovy:groovy-templates:$groovy4Version"
    doc "com.github.javaparser:javaparser-core:$javaparserVersion"

    // Needs to be compiled with Groovy 3 as it is used by the Gradle Plugin
    compileOnly "com.google.javascript:closure-compiler-unshaded:$closureCompilerVersion"
    compileOnly "org.codehaus.groovy:groovy:$groovy3Version"
    compileOnly "org.codehaus.groovy:groovy-json:$groovy3Version"
    compileOnly "org.codehaus.groovy:groovy-templates:$groovy3Version"
    compileOnly "org.graalvm.polyglot:polyglot:$graalvmVersion"
    compileOnly "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation project(':asset-pipeline-classpath-test')
    testImplementation "org.apache.groovy:groovy:$groovy4Version"
    testImplementation "org.spockframework:spock-core:$spockVersion"

    testRuntimeOnly "com.google.javascript:closure-compiler-unshaded:$closureCompilerVersion"
    testRuntimeOnly "org.graalvm.js:js-community:$graalvmVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

task(console, dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register("depsize") {
    description = 'Prints dependencies for "default" configuration'
    doLast() {
        listConfigurationDependencies(configurations.runtimeClasspath)
    }
}

tasks.register("depsize-all-configurations") {
    description = 'Prints dependencies for all available configurations'
    doLast() {
        configurations
                .findAll { it.isCanBeResolved() }
                .each { listConfigurationDependencies(it) }
    }
}

def listConfigurationDependencies(Configuration configuration) {
    def formatStr = "%,10.2f"

    def size = configuration.collect { it.length() / (1024 * 1024) }.sum()

    def out = new StringBuffer()
    out << "\nConfiguration name: \"${configuration.name}\"\n"
    if (size) {
        out << 'Total dependencies size:'.padRight(65)
        out << "${String.format(formatStr, size)} Mb\n\n"

        configuration.sort { -it.length() }
                .each {
                    out << "${it.name}".padRight(65)
                    out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
                }
    } else {
        out << 'No dependencies found'
    }
    println(out)
}

test {
    useJUnitPlatform()
    testLogging {
        events('passed', 'skipped', 'failed')
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

apply {
    from rootProject.layout.projectDirectory.file('gradle/java-config.gradle')
    from rootProject.layout.projectDirectory.file('gradle/publish-config.gradle')
}

tasks.named('groovydoc', Groovydoc).configure { Groovydoc it ->
    it.docTitle "Asset Pipeline Core"
    it.windowTitle "Asset Pipeline For the JVM API Doc"
    it.groovyClasspath = configurations.doc
    it.classpath = configurations.runtime
    // Links to external Javadoc, currently only the J2SE links are working properly
    it.link('http://download.oracle.com/javase/8/docs/api/', 'java.', 'org.xml', 'javax.', 'org.xml.')
    it.link('http://groovy.codehaus.org/api/', 'groovy.', 'org.apache.groovy.')
}

tasks.named('javadocJar', Jar).configure { Jar it ->
    // TODO: help-doc.html is a duplicate
    it.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}